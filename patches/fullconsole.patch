Index: src/engine/console.cpp
===================================================================
--- src/engine/console.cpp	(revision 6479)
+++ src/engine/console.cpp	(working copy)
@@ -48,7 +48,10 @@
 }

 VAR(fullconsole, 0, 0, 1);
-ICOMMAND(toggleconsole, "", (), { fullconsole ^= 1; });
+ICOMMAND(toggleconsole, "", (), {
+    fullconsole ^= 1;
+    if(fullconsole) game::showscores(false);
+});

 int rendercommand(int x, int y, int w)
 {
@@ -67,7 +70,7 @@
 VARP(miniconwidth, 0, 40, 100);
 VARP(confade, 0, 30, 60);
 VARP(miniconfade, 0, 30, 60);
-VARP(fullconsize, 0, 75, 100);
+VARP(fullconsize, 0, 75, 100); // unused
 HVARP(confilter, 0, 0x7FFFFFF, 0x7FFFFFF);
 HVARP(fullconfilter, 0, 0x7FFFFFF, 0x7FFFFFF);
 HVARP(miniconfilter, 0, 0, 0x7FFFFFF);
@@ -140,18 +143,20 @@

 int renderconsole(int w, int h, int abovehud)                   // render buffer taking into account time & scrolling
 {
-    int conpad = fullconsole ? 0 : FONTH/4,
-        conoff = fullconsole ? FONTH : FONTH/3,
-        conheight = min(fullconsole ? ((h*fullconsize/100)/FONTH)*FONTH : FONTH*consize, h - 2*(conpad + conoff)),
+    int conpad = FONTH/4,
+        conoff = FONTH/3,
         conwidth = w - 2*(conpad + conoff) - (fullconsole ? 0 : game::clipconsole(w, h));

-    extern void consolebox(int x1, int y1, int x2, int y2);
-    if(fullconsole) consolebox(conpad, conpad, conwidth+conpad+2*conoff, conheight+conpad+2*conoff);
+    if(fullconsole)
+    {
+        drawconlines(conskip, 0, conwidth, abovehud-(conpad+conoff), conpad+conoff, fullconfilter);
+        return abovehud;
+    }

-    int y = drawconlines(conskip, fullconsole ? 0 : confade, conwidth, conheight, conpad+conoff, fullconsole ? fullconfilter : confilter);
-    if(!fullconsole && (miniconsize && miniconwidth))
-        drawconlines(miniconskip, miniconfade, (miniconwidth*(w - 2*(conpad + conoff)))/100, min(FONTH*miniconsize, abovehud - y), conpad+conoff, miniconfilter, abovehud, -1);
-    return fullconsole ? conheight + 2*(conpad + conoff) : y;
+    int conheight = min(FONTH*consize, h - 2*(conpad + conoff));
+    int y = drawconlines(conskip, confade, conwidth, conheight, conpad+conoff, confilter);
+    if(miniconsize && miniconwidth) drawconlines(miniconskip, miniconfade, (miniconwidth*(w - 2*(conpad + conoff)))/100, min(FONTH*miniconsize, abovehud - y), conpad+conoff, miniconfilter, abovehud, -1);
+    return y;
 }

 // keymap is defined externally in keymap.cfg
Index: src/engine/rendergl.cpp
===================================================================
--- src/engine/rendergl.cpp	(revision 6479)
+++ src/engine/rendergl.cpp	(working copy)
@@ -2072,6 +2072,25 @@
     loopi(8) damagedirs[i] = 0;
 }

+MOD(VARP, fullconalpha, 1, 50, 100);
+
+void drawfullconsoleshade(int w, int h)
+{
+    hudnotextureshader->set();
+
+    w = min(w/2, 25*FONTW);
+
+    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+    gle::defvertex(2);
+    gle::defcolor(4);
+    gle::begin(GL_TRIANGLE_STRIP);
+    gle::attribf(w, 0); gle::attribf(0, 0, 0, 0.0f);
+    gle::attribf(0, 0); gle::attribf(0, 0, 0, fullconalpha/100.0f);
+    gle::attribf(w, h); gle::attribf(0, 0, 0, 0.0f);
+    gle::attribf(0, h); gle::attribf(0, 0, 0, fullconalpha/100.0f);
+    gle::end();
+}
+
 VAR(hidestats, 0, 0, 1);
 VAR(hidehud, 0, 0, 1);

@@ -2233,6 +2252,8 @@
         drawdamagecompass(w, h);
     }

+    if(fullconsole) drawfullconsoleshade(w, h);
+
     hudshader->set();

     int conw = int(w/conscale), conh = int(h/conscale), abovehud = conh - FONTH, limitgui = abovehud;
@@ -2364,8 +2385,8 @@
     pushhudmatrix();
     hudmatrix.scale(conscale, conscale, 1);
     flushhudmatrix();
-    abovehud -= rendercommand(FONTH/2, abovehud - FONTH/2, conw-FONTH);
-    extern int fullconsole;
+    int commandheight = rendercommand(FONTH/2, abovehud - FONTH/2, conw-FONTH);
+    abovehud -= max(fullconsole ? FONTH : 0, commandheight);
     if(!hidehud || fullconsole) renderconsole(conw, conh, abovehud - FONTH/2);
     pophudmatrix();

Index: src/fpsgame/scoreboard.cpp
===================================================================
--- src/fpsgame/scoreboard.cpp	(revision 6479)
+++ src/fpsgame/scoreboard.cpp	(working copy)
@@ -461,14 +461,25 @@
         scoreboard.render();
     }

-    VARFN(scoreboard, showscoreboard, 0, 0, 1, scoreboard.show(showscoreboard!=0));
-
+    int wasfullconsole = 0;
     void showscores(bool on)
     {
+        if(on && !wasfullconsole)
+        {
+            wasfullconsole = fullconsole;
+            fullconsole = 0;
+        }
+        if(!on)
+        {
+           if(!fullconsole && wasfullconsole) fullconsole = 1;
+            wasfullconsole = 0;
+        }
+        extern int showscoreboard;
         showscoreboard = on ? 1 : 0;
         scoreboard.show(on);
     }
     ICOMMAND(showscores, "D", (int *down), showscores(*down!=0));
+    VARFN(scoreboard, showscoreboard, 0, 0, 1, showscores(showscoreboard!=0));

     VARP(hudscore, 0, 0, 1);
     FVARP(hudscorescale, 1e-3f, 1.0f, 1e3f);
Index: src/shared/iengine.h
===================================================================
--- src/shared/iengine.h	(revision 6479)
+++ src/shared/iengine.h	(working copy)
@@ -199,6 +199,8 @@
     CON_TAG_MASK = (0x7FFF << CON_TAG_SHIFT)
 };

+extern int fullconsole;
+
 extern void conoutf(const char *s, ...) PRINTFARGS(1, 2);
 extern void conoutf(int type, const char *s, ...) PRINTFARGS(2, 3);
 extern void conoutf(int type, int tag, const char *s, ...) PRINTFARGS(3, 4);
Index: src/shared/igame.h
===================================================================
--- src/shared/igame.h	(revision 6479)
+++ src/shared/igame.h	(working copy)
@@ -80,6 +80,7 @@
     extern void readgamedata(vector<char> &extras);
     extern int clipconsole(int w, int h);
     extern void g3d_gamemenus();
+    extern void showscores(bool on);
     extern const char *defaultcrosshair(int index);
     extern int selectcrosshair(vec &color);
     extern void lighteffects(dynent *d, vec &color, vec &dir);
