Index: src/Makefile
===================================================================
--- src/Makefile	(revision 6488)
+++ src/Makefile	(working copy)
@@ -66,7 +66,7 @@
 CLIENT_LIBS+= -framework AudioUnit -framework OpenGL -framework Cocoa -lz -Lenet -lenet
 else
 CLIENT_INCLUDES= $(INCLUDES) -I/usr/X11R6/include `sdl2-config --cflags`
-CLIENT_LIBS= -Lenet -lenet -L/usr/X11R6/lib -lX11 `sdl2-config --libs` -lSDL2_image -lSDL2_mixer -lz -lGL
+CLIENT_LIBS= -Lenet -lenet -L/usr/X11R6/lib -lX11 `sdl2-config --libs` -lSDL2_image -lSDL2_mixer -lz -lGL -lwayland-client
 endif
 endif
 ifeq ($(PLATFORM),LINUX)
@@ -119,6 +119,7 @@
 	engine/sound.o \
 	engine/texture.o \
 	engine/water.o \
+	engine/wayland.o \
 	engine/world.o \
 	engine/worldio.o \
 	fpsgame/ai.o \
@@ -329,6 +330,7 @@
 engine/main.o: shared/ents.h shared/command.h shared/glexts.h shared/glemu.h
 engine/main.o: shared/iengine.h shared/igame.h engine/world.h engine/octa.h
 engine/main.o: engine/lightmap.h engine/bih.h engine/texture.h engine/model.h
+engine/main.o: engine/wayland.h
 engine/material.o: engine/engine.h shared/cube.h shared/tools.h shared/geom.h
 engine/material.o: shared/ents.h shared/command.h shared/glexts.h
 engine/material.o: shared/glemu.h shared/iengine.h shared/igame.h
@@ -449,6 +451,7 @@
 engine/water.o: shared/iengine.h shared/igame.h engine/world.h engine/octa.h
 engine/water.o: engine/lightmap.h engine/bih.h engine/texture.h
 engine/water.o: engine/model.h
+engine/wayland.o: engine/engine.h engine/wayland.h
 engine/world.o: engine/engine.h shared/cube.h shared/tools.h shared/geom.h
 engine/world.o: shared/ents.h shared/command.h shared/glexts.h shared/glemu.h
 engine/world.o: shared/iengine.h shared/igame.h engine/world.h engine/octa.h
@@ -509,6 +512,7 @@
 engine/engine.h.gch: shared/iengine.h shared/igame.h engine/world.h
 engine/engine.h.gch: engine/octa.h engine/lightmap.h engine/bih.h
 engine/engine.h.gch: engine/texture.h engine/model.h
+engine/engine.h.gch: engine/wayland.h
 fpsgame/game.h.gch: shared/cube.h shared/tools.h shared/geom.h shared/ents.h
 fpsgame/game.h.gch: shared/command.h shared/glexts.h shared/glemu.h
 fpsgame/game.h.gch: shared/iengine.h shared/igame.h fpsgame/ai.h
Index: src/engine/engine.h
===================================================================
--- src/engine/engine.h	(revision 6488)
+++ src/engine/engine.h	(working copy)
@@ -607,6 +607,8 @@
     extern void cleanup();
 }

+#include "wayland.h"
+
 #endif

 #endif
Index: src/engine/main.cpp
===================================================================
--- src/engine/main.cpp	(revision 6488)
+++ src/engine/main.cpp	(working copy)
@@ -72,7 +72,7 @@
     exit(EXIT_FAILURE);
 }

-int curtime = 0, lastmillis = 1, elapsedtime = 0, totalmillis = 1;
+int curtime = 0, lastmillis = 1, elapsedtime = 0, totalmillis = 1, curframetime = 0;

 dynent *player = NULL;

@@ -620,6 +620,7 @@
 {
     if(initing || !glcontext) return;
     extern int vsync, vsynctear;
+    if(wayland && vsync) { conoutf("wayland is tear-free, disabling vsync"); vsync = 0; }
     if(!SDL_GL_SetSwapInterval(vsync ? (vsynctear ? -1 : 1) : 0))
         curvsync = vsync;
 }
@@ -731,6 +732,10 @@
     SDL_SetWindowMaximumSize(screen, SCR_MAXW, SCR_MAXH);

     SDL_GetWindowSize(screen, &screenw, &screenh);
+
+    #ifdef SDL_VIDEO_DRIVER_WAYLAND
+    setupwayland();
+    #endif
 }

 void resetgl()
@@ -1031,31 +1036,39 @@
     gle::disable();
     SDL_GL_SwapWindow(screen);
 }
-
+
 VAR(menufps, 0, 60, 1000);
 VARP(maxfps, 0, 200, 1000);
+VARFP(maxtps, 0, 0, 1000, { if(maxtps && maxtps<60) {conoutf("can't set maxtps < 60"); maxtps = 60;} });

-void limitfps(int &millis, int curmillis)
+void ratelimit(int &millis, int lastdrawmillis, bool &draw)
 {
-    int limit = (mainmenu || minimized) && menufps ? (maxfps ? min(maxfps, menufps) : menufps) : maxfps;
-    if(!limit) return;
-    static int fpserror = 0;
-    int delay = 1000/limit - (millis-curmillis);
-    if(delay < 0) fpserror = 0;
-    else
+    int fpslimit = (mainmenu || minimized) && menufps ? (maxfps ? min(maxfps, menufps) : menufps) : maxfps;
+    if(!fpslimit && !wayland) draw = true;
+    int tpslimit = maxtps ? max(maxtps, fpslimit) : 0;
+    if(!fpslimit && !tpslimit) return;
+    int delay = 1;
+    if(tpslimit) delay = 1000/tpslimit - (millis-totalmillis);
+    // should we draw?
+    int fpsdelay = INT_MAX;
+    if(fpslimit && !wayland)
     {
-        fpserror += 1000%limit;
-        if(fpserror >= limit)
+        fpsdelay = 1000/fpslimit - (millis-lastdrawmillis);
+        static int fpserror = 0;
+        if(fpserror >= fpslimit) fpsdelay++;
+        if(fpsdelay <= delay)
         {
-            ++delay;
-            fpserror -= limit;
+            draw = true;
+            if(fpserror >= fpslimit) fpserror -= fpslimit;
+            fpserror += 1000%fpslimit;
         }
-        if(delay > 0)
-        {
-            SDL_Delay(delay);
-            millis += delay;
-        }
     }
+    delay = min(delay, fpsdelay);
+    if(delay > 0)
+    {
+        SDL_Delay(delay);
+        millis += delay;
+    }
 }

 #if defined(WIN32) && !defined(_DEBUG) && !defined(__GNUC__)
@@ -1346,9 +1359,10 @@

     for(;;)
     {
-        static int frames = 0;
+        static int frames = 0, lastdrawmillis = 0;
         int millis = getclockmillis();
-        limitfps(millis, totalmillis);
+        bool draw = false;
+        ratelimit(millis, lastdrawmillis, draw);
         elapsedtime = millis - totalmillis;
         static int timeerr = 0;
         int scaledtime = game::scaletime(elapsedtime) + timeerr;
@@ -1359,7 +1373,7 @@
 		lastmillis += curtime;
         totalmillis = millis;
         updatetime();
-
+
         checkinput();
         menuprocess();
         tryedit();
@@ -1370,9 +1384,6 @@

         serverslice(false, 0);

-        if(frames) updatefpshistory(elapsedtime);
-        frames++;
-
         // miscellaneous general game effects
         recomputecamera();
         updateparticles();
@@ -1380,14 +1391,30 @@

         if(minimized) continue;

-        inbetweenframes = false;
-        if(mainmenu) gl_drawmainmenu();
-        else gl_drawframe();
-        swapbuffers();
-        renderedframe = inbetweenframes = true;
+        #ifdef SDL_VIDEO_DRIVER_WAYLAND
+        if(wayland) draw = SDL_AtomicCAS(&framerequested, 1, 0);
+        #endif
+        if(draw)
+        {
+            int frametime = millis - lastdrawmillis;
+            static int frametimeerr = 0;
+            int scaledframetime = game::scaletime(frametime) + frametimeerr;
+            curframetime = scaledframetime/100;
+            frametimeerr = scaledframetime%100;
+
+            if(frames) updatefpshistory(frametime);
+            frames++;
+
+            inbetweenframes = false;
+            if(mainmenu) gl_drawmainmenu();
+            else gl_drawframe();
+            swapbuffers();
+            renderedframe = inbetweenframes = true;
+            lastdrawmillis = millis;
+        }
     }
-
-    ASSERT(0);
+
+    ASSERT(0);
     return EXIT_FAILURE;

     #if defined(WIN32) && !defined(_DEBUG) && !defined(__GNUC__)
Index: src/engine/rendergl.cpp
===================================================================
--- src/engine/rendergl.cpp	(revision 6488)
+++ src/engine/rendergl.cpp	(working copy)
@@ -2025,7 +2025,7 @@
         gle::attrib(m.transform(vec2(0, 0)));

         // fade in log space so short blips don't disappear too quickly
-        scale -= float(curtime)/damagecompassfade;
+        scale -= float(curframetime)/damagecompassfade;
         damagedirs[i] = scale > 0 ? (pow(logscale, scale) - 1) / (logscale - 1) : 0;
     }
     if(dirs) gle::end();
Index: src/engine/wayland.cpp
===================================================================
--- src/engine/wayland.cpp	(nonexistent)
+++ src/engine/wayland.cpp	(working copy)
@@ -0,0 +1,42 @@
+#include "engine.h"
+
+VAR(wayland, 1, 0, 0);
+
+#ifdef SDL_VIDEO_DRIVER_WAYLAND
+
+#include "SDL_syswm.h"
+#include <wayland-client-protocol.h>
+
+static struct wl_surface *surface;
+static struct  wl_callback_listener framecallbacklistener;
+
+void setupcallbacklistener()
+{
+    wl_callback *framecallback = wl_surface_frame(surface);
+    wl_callback_add_listener(framecallback, &framecallbacklistener, NULL);
+}
+
+SDL_atomic_t framerequested;
+
+void markframerequested(void *data, struct wl_callback *framecallback, uint32_t time)
+{
+	wl_callback_destroy(framecallback);
+    SDL_AtomicSet(&framerequested, 1);
+    setupcallbacklistener();
+    framecallbacklistener.done = markframerequested;
+}
+
+void setupwayland()
+{
+    SDL_SysWMinfo info;
+    SDL_VERSION(&info.version);
+    if(!SDL_GetWindowWMInfo(screen, &info)) return;
+    if(info.subsystem != SDL_SYSWM_WAYLAND) return;
+    surface = info.info.wl.surface;
+    setupcallbacklistener();
+    framecallbacklistener.done = markframerequested;
+    wayland = true;
+    SDL_AtomicSet(&framerequested, 1);
+}
+
+#endif
Index: src/engine/wayland.h
===================================================================
--- src/engine/wayland.h	(nonexistent)
+++ src/engine/wayland.h	(working copy)
@@ -0,0 +1,8 @@
+#include "SDL.h"
+
+extern int wayland;
+
+#ifdef SDL_VIDEO_DRIVER_WAYLAND
+extern void setupwayland();
+extern SDL_atomic_t framerequested;
+#endif
Index: src/shared/iengine.h
===================================================================
--- src/shared/iengine.h	(revision 6488)
+++ src/shared/iengine.h	(working copy)
@@ -1,9 +1,10 @@
 // the interface the game uses to access the engine

-extern int curtime;                     // current frame time
-extern int lastmillis;                  // last time
-extern int elapsedtime;                 // elapsed frame time
-extern int totalmillis;                 // total elapsed time
+extern int curtime;          // scaled duration since last step
+extern int lastmillis;       // totalmillis value at last step
+extern int elapsedtime;      // wall clock duration since last step
+extern int totalmillis;      // total elapsed wall clock duration since engine start
+extern int curframetime;     // scaled duration since last frame
 extern uint totalsecs;
 extern int gamespeed, paused;

Index: src/vcpp/sauerbraten.vcxproj
===================================================================
--- src/vcpp/sauerbraten.vcxproj	(revision 6488)
+++ src/vcpp/sauerbraten.vcxproj	(working copy)
@@ -1002,6 +1002,20 @@
       <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
       <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
     </ClCompile>
+    <ClCompile Include="..\engine\wayland.cpp">
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">engine.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">engine.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">engine.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">engine.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">engine.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">engine.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)engine.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
     <ClCompile Include="..\shared\crypto.cpp" />
     <ClCompile Include="..\shared\geom.cpp" />
     <ClCompile Include="..\shared\glemu.cpp" />
