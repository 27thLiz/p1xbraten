Index: src/engine/main.cpp
===================================================================
--- src/engine/main.cpp	(revision 6490)
+++ src/engine/main.cpp	(working copy)
@@ -72,7 +72,7 @@
     exit(EXIT_FAILURE);
 }

-int curtime = 0, lastmillis = 1, elapsedtime = 0, totalmillis = 1;
+int curtime = 0, lastmillis = 1, elapsedtime = 0, totalmillis = 1, curframetime = 0;

 dynent *player = NULL;

@@ -1034,28 +1034,36 @@

 VAR(menufps, 0, 60, 1000);
 VARP(maxfps, 0, 200, 1000);
+VARFP(maxtps, 0, 0, 1000, { if(maxtps && maxtps<60) {conoutf("can't set maxtps < 60"); maxtps = 60;} });

-void limitfps(int &millis, int curmillis)
+void ratelimit(int &millis, int lastdrawmillis, bool &draw)
 {
-    int limit = (mainmenu || minimized) && menufps ? (maxfps ? min(maxfps, menufps) : menufps) : maxfps;
-    if(!limit) return;
-    static int fpserror = 0;
-    int delay = 1000/limit - (millis-curmillis);
-    if(delay < 0) fpserror = 0;
-    else
-    {
-        fpserror += 1000%limit;
-        if(fpserror >= limit)
-        {
-            ++delay;
-            fpserror -= limit;
-        }
-        if(delay > 0)
-        {
-            SDL_Delay(delay);
-            millis += delay;
-        }
+    int fpslimit = (mainmenu || minimized) && menufps ? (maxfps ? min(maxfps, menufps) : menufps) : maxfps;
+    if(!fpslimit) draw = true;
+    int tpslimit = minimized ? 100 : (maxtps ? max(maxtps, fpslimit) : 0);
+    if(!fpslimit && !tpslimit) return;
+    int delay = 1;
+    if(tpslimit) delay = 1000/tpslimit - (millis-totalmillis);
+    // should we draw?
+    int fpsdelay = INT_MAX;
+    if(!minimized && fpslimit)
+    {
+        fpsdelay = 1000/fpslimit - (millis-lastdrawmillis);
+        static int fpserror = 0;
+        if(fpserror >= fpslimit) fpsdelay++;
+        if(fpsdelay <= delay)
+        {
+            draw = true;
+            if(fpserror >= fpslimit) fpserror -= fpslimit;
+            fpserror += 1000%fpslimit;
+        }
+    }
+    delay = min(delay, fpsdelay);
+    if(delay > 0)
+    {
+       SDL_Delay(delay);
+       millis += delay;
     }
 }

 #if defined(WIN32) && !defined(_DEBUG) && !defined(__GNUC__)
@@ -1346,9 +1354,10 @@

     for(;;)
     {
-        static int frames = 0;
+        static int frames = 0, lastdrawmillis = 0;
         int millis = getclockmillis();
-        limitfps(millis, totalmillis);
+        bool draw = false;
+        ratelimit(millis, lastdrawmillis, draw);
         elapsedtime = millis - totalmillis;
         static int timeerr = 0;
         int scaledtime = game::scaletime(elapsedtime) + timeerr;
@@ -1370,9 +1379,6 @@

         serverslice(false, 0);

-        if(frames) updatefpshistory(elapsedtime);
-        frames++;
-
         // miscellaneous general game effects
         recomputecamera();
         updateparticles();
@@ -1380,11 +1386,24 @@

         if(minimized) continue;

-        inbetweenframes = false;
-        if(mainmenu) gl_drawmainmenu();
-        else gl_drawframe();
-        swapbuffers();
-        renderedframe = inbetweenframes = true;
+        if(draw)
+        {
+            int frametime = millis - lastdrawmillis;
+            static int frametimeerr = 0;
+            int scaledframetime = game::scaletime(frametime) + frametimeerr;
+            curframetime = scaledframetime/100;
+            frametimeerr = scaledframetime%100;
+
+            if(frames) updatefpshistory(frametime);
+            frames++;
+
+            inbetweenframes = false;
+            if(mainmenu) gl_drawmainmenu();
+            else gl_drawframe();
+            swapbuffers();
+            renderedframe = inbetweenframes = true;
+            lastdrawmillis = millis;
+        }
     }

     ASSERT(0);
Index: src/engine/rendergl.cpp
===================================================================
--- src/engine/rendergl.cpp	(revision 6490)
+++ src/engine/rendergl.cpp	(working copy)
@@ -2025,7 +2025,7 @@
         gle::attrib(m.transform(vec2(0, 0)));

         // fade in log space so short blips don't disappear too quickly
-        scale -= float(curtime)/damagecompassfade;
+        scale -= float(curframetime)/damagecompassfade;
         damagedirs[i] = scale > 0 ? (pow(logscale, scale) - 1) / (logscale - 1) : 0;
     }
     if(dirs) gle::end();
Index: src/shared/iengine.h
===================================================================
--- src/shared/iengine.h	(revision 6490)
+++ src/shared/iengine.h	(working copy)
@@ -1,9 +1,10 @@
 // the interface the game uses to access the engine

-extern int curtime;                     // current frame time
-extern int lastmillis;                  // last time
-extern int elapsedtime;                 // elapsed frame time
-extern int totalmillis;                 // total elapsed time
+extern int curtime;          // scaled duration since last step
+extern int lastmillis;       // totalmillis value at last step
+extern int elapsedtime;      // wall clock duration since last step
+extern int totalmillis;      // total elapsed wall clock duration since engine start
+extern int curframetime;     // scaled duration since last frame
 extern uint totalsecs;
 extern int gamespeed, paused;

