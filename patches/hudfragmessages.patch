Index: src/Makefile
===================================================================
--- src/Makefile	(revision 6471)
+++ src/Makefile	(working copy)
@@ -125,6 +125,7 @@
 	fpsgame/client.o \
 	fpsgame/entities.o \
 	fpsgame/fps.o \
+	fpsgame/fragmessages.o \
 	fpsgame/monster.o \
 	fpsgame/movable.o \
 	fpsgame/render.o \
@@ -481,3 +482,4 @@
+fpsgame/fragmessages.o: fpsgame/game.h fpsgame/fragmessage_type.h
 fpsgame/monster.o: fpsgame/game.h shared/cube.h shared/tools.h shared/geom.h
 fpsgame/monster.o: shared/ents.h shared/command.h shared/glexts.h
 fpsgame/monster.o: shared/glemu.h shared/iengine.h shared/igame.h
@@ -523,3 +525,4 @@
+fpsgame/game.h.gch: fpsgame/fragmessage_type.h fpsgame/fragmessages.h

 shared/crypto-standalone.o: shared/cube.h shared/tools.h shared/geom.h
 shared/crypto-standalone.o: shared/ents.h shared/command.h shared/iengine.h
Index: src/fpsgame/fps.cpp
===================================================================
--- src/fpsgame/fps.cpp	(revision 6471)
+++ src/fpsgame/fps.cpp	(working copy)
@@ -495,6 +495,8 @@
         {
             if(d==player1) conoutf(contype, "\f2%s got fragged by %s", dname, aname);
             else conoutf(contype, "\f2%s fragged %s", aname, dname);
+            addfragmessage(actor, aname, dname, d->lasthitpushgun);
+            addfragmessage(d, aname, dname, d->lasthitpushgun);
         }
         deathstate(d);
 		ai::killed(d, actor);
@@ -1091,6 +1093,7 @@
         {
             if(gameclock) drawgameclock(w, h);
             if(hudscore) drawhudscore(w, h);
+            if(hudfragmessages==1 || (hudfragmessages==2 && !m_insta)) drawfragmessages(d, w, h);
         }
     }

Index: src/fpsgame/fragmessage_type.h
===================================================================
--- src/fpsgame/fragmessage_type.h	(nonexistent)
+++ src/fpsgame/fragmessage_type.h	(working copy)
@@ -0,0 +1,20 @@
+#ifndef __FRAGMESSAGE_TYPE_H__
+#define __FRAGMESSAGE_TYPE_H__
+
+#include "game.h"
+
+struct fragmessage {
+    string attackername, victimname;
+    int weapon;
+    int millis;
+
+    fragmessage(const char *aname, const char *vname, int fragweapon)
+    {
+        copystring(attackername, aname);
+        copystring(victimname, vname);
+        weapon = fragweapon;
+        millis = lastmillis;
+    }
+};
+
+#endif
Index: src/fpsgame/fragmessages.cpp
===================================================================
--- src/fpsgame/fragmessages.cpp	(nonexistent)
+++ src/fpsgame/fragmessages.cpp	(working copy)
@@ -0,0 +1,62 @@
+#include "game.h"
+#include "fragmessage_type.h"
+
+namespace game {
+    VARP(hudfragmessages, 0, 1, 2);
+    VARP(hudfragmessageduration, 0, 2000, 10000);
+    VARP(maxhudfragmessages, 1, 3, 10);
+    FVARP(hudfragmessagex, 0, 0.5f, 1.0f);
+    FVARP(hudfragmessagey, 0, 0.25f, 1.0f);
+    FVARP(hudfragmessagescale, 0.1f, 0.5f, 1.0f);
+
+    void addfragmessage(fpsent *c, const char *aname, const char *vname, int gun)
+    {
+        if(c->fragmessages->length()>=maxhudfragmessages) c->fragmessages->remove(0);
+        c->fragmessages->add(fragmessage(aname, vname, gun));
+    }
+
+    void drawfragmessages(fpsent *d, int w, int h)
+    {
+        if(d->fragmessages->empty()) return;
+
+        float stepsize = (3*HICON_SIZE)/2;
+        float stepdir = hudfragmessagey>0.5 ? 1 : -1;
+        vec2 origin = vec2(hudfragmessagex, hudfragmessagey).mul(vec2(w, h).div(hudfragmessagescale));
+
+        pushhudmatrix();
+        hudmatrix.scale(hudfragmessagescale, hudfragmessagescale, 1);
+        flushhudmatrix();
+
+        for(int i = d->fragmessages->length()-1; i>=0; i--)
+        {
+            fragmessage &m = (*d->fragmessages)[i];
+
+            if(lastmillis-m.millis > hudfragmessageduration)
+            {
+                // all messages before i are older, so remove all of them
+                d->fragmessages->remove(0, i+1);
+                break;
+            }
+
+            int fademillis = 255; //todo: make fademillis = hudfragmessageduration/10;
+            int alpha = 255;
+            if(lastmillis-m.millis > hudfragmessageduration-fademillis) alpha -= lastmillis - m.millis - hudfragmessageduration + fademillis;
+
+            vec2 drawposcenter = vec2(0, (d->fragmessages->length()-1-i)*stepdir*stepsize).add(origin);
+
+            int tw, th; text_bounds(m.attackername, tw, th);
+            vec2 drawpos = vec2(-2*(tw+HICON_SIZE), -th).div(2).add(drawposcenter);
+            draw_text(m.attackername, drawpos.x, drawpos.y, 0xFF, 0xFF, 0xFF, alpha);
+
+            drawpos = vec2(drawposcenter).sub(HICON_SIZE / 2);
+            gle::color(bvec(0xFF, 0xFF, 0xFF), alpha);
+            drawicon(HICON_FIST + m.weapon, drawpos.x, drawpos.y);
+
+            text_bounds(m.victimname, tw, th);
+            drawpos = vec2(2*HICON_SIZE, -th).div(2).add(drawposcenter);
+            draw_text(m.victimname, drawpos.x, drawpos.y, 0xFF, 0xFF, 0xFF, alpha);
+        }
+
+        pophudmatrix();
+    }
+}
\ No newline at end of file
Index: src/fpsgame/fragmessages.h
===================================================================
--- src/fpsgame/fragmessages.h	(nonexistent)
+++ src/fpsgame/fragmessages.h	(working copy)
@@ -0,0 +1,13 @@
+#ifndef __FRAGMESSAGES_H__
+#define __FRAGMESSAGES_H__
+
+#include "game.h"
+
+namespace game {
+    extern vector<fragmessage> fragmessages;
+    extern int hudfragmessages;
+    extern void addfragmessage(fpsent *c, const char *aname, const char *vname, int gun);
+    extern void drawfragmessages(fpsent *d, int w, int h);
+}
+
+#endif
\ No newline at end of file
Index: src/fpsgame/game.h
===================================================================
--- src/fpsgame/game.h	(revision 6471)
+++ src/fpsgame/game.h	(working copy)
@@ -535,6 +535,8 @@
     }
 };

+#include "fragmessage_type.h"
+
 struct fpsent : dynent, fpsstate
 {
     int weight;                         // affects the effectiveness of hitpush
@@ -543,6 +545,8 @@
     int respawned, suicided;
     int lastpain;
     int lastaction, lastattackgun;
+    int lasthitpushgun;
+    vector<fragmessage> *fragmessages; // oldest first, newest at the end
     bool attacking;
     int attacksound, attackchan, idlesound, idlechan;
     int lasttaunt;
@@ -563,6 +567,7 @@
     fpsent() : weight(100), clientnum(-1), privilege(PRIV_NONE), lastupdate(0), plag(0), ping(0), lifesequence(0), respawned(-1), suicided(-1), lastpain(0), attacksound(-1), attackchan(-1), idlesound(-1), idlechan(-1), frags(0), flags(0), deaths(0), totaldamage(0), totalshots(0), edit(NULL), smoothmillis(-1), playermodel(-1), ai(NULL), ownernum(-1), muzzle(-1, -1, -1)
     {
         name[0] = team[0] = info[0] = 0;
+        fragmessages = new vector<fragmessage>;
         respawn();
     }
     ~fpsent()
@@ -571,6 +576,7 @@
         if(attackchan >= 0) stopsound(attacksound, attackchan);
         if(idlechan >= 0) stopsound(idlesound, idlechan);
         if(ai) delete ai;
+        DELETEP(fragmessages);
     }

     void hitpush(int damage, const vec &dir, fpsent *actor, int gun)
@@ -578,6 +584,7 @@
         vec push(dir);
         push.mul((actor==this && guns[gun].exprad ? EXP_SELFPUSH : 1.0f)*guns[gun].hitpush*damage/weight);
         vel.add(push);
+        lasthitpushgun = gun;
     }

     void stopattacksound()
@@ -846,6 +853,8 @@
     extern vec hudgunorigin(int gun, const vec &from, const vec &to, fpsent *d);
 }

+#include "fragmessages.h"
+
 namespace server
 {
     extern const char *modename(int n, const char *unknown = "unknown");
Index: src/vcpp/sauerbraten.vcxproj
===================================================================
--- src/vcpp/sauerbraten.vcxproj	(revision 6471)
+++ src/vcpp/sauerbraten.vcxproj	(working copy)
@@ -1078,6 +1078,20 @@
       <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
       <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
     </ClCompile>
+    <ClCompile Include="..\fpsgame\fragmessages.cpp">
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
     <ClCompile Include="..\fpsgame\monster.cpp">
       <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">game.h</PrecompiledHeaderFile>
       <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">game.h</PrecompiledHeaderFile>
