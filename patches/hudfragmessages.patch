Index: src/Makefile
===================================================================
--- src/Makefile	(revision 6479)
+++ src/Makefile	(working copy)
@@ -125,6 +125,7 @@
 	fpsgame/client.o \
 	fpsgame/entities.o \
 	fpsgame/fps.o \
+	fpsgame/fragmessages.o \
 	fpsgame/monster.o \
 	fpsgame/movable.o \
 	fpsgame/render.o \
@@ -482,3 +483,4 @@
+fpsgame/fragmessages.o: fpsgame/game.h fpsgame/fragmessages.h
 fpsgame/monster.o: fpsgame/game.h shared/cube.h shared/tools.h shared/geom.h
 fpsgame/monster.o: shared/ents.h shared/command.h shared/glexts.h
 fpsgame/monster.o: shared/glemu.h shared/iengine.h shared/igame.h
@@ -525,3 +527,4 @@
+fpsgame/game.h.gch: fpsgame/fragmessages.h

 shared/crypto-standalone.o: shared/cube.h shared/tools.h shared/geom.h
 shared/crypto-standalone.o: shared/ents.h shared/command.h shared/iengine.h
Index: src/fpsgame/fps.cpp
===================================================================
--- src/fpsgame/fps.cpp	(revision 6488)
+++ src/fpsgame/fps.cpp	(working copy)
@@ -34,9 +34,11 @@
     {
         if(arg[0] ? player1->state==CS_SPECTATOR : following>=0)
         {
+            int ofollowing = following;
             following = arg[0] ? parseplayer(arg) : -1;
             if(following==player1->clientnum) following = -1;
             followdir = 0;
+            if(following!=ofollowing) clearfragmessages();
             conoutf("follow %s", following>=0 ? "on" : "off");
         }
 	}
@@ -55,6 +57,7 @@
             cur = (cur + dir + clients.length()) % clients.length();
             if(clients[cur] && clients[cur]->state!=CS_SPECTATOR)
             {
+                if(following != cur) clearfragmessages();
                 if(following<0) conoutf("follow on");
                 following = cur;
                 followdir = dir;
@@ -115,6 +118,7 @@
         if(following<0) return;
         following = -1;
         followdir = 0;
+        clearfragmessages();
         conoutf("follow off");
     }

@@ -496,6 +500,10 @@
             if(d==player1) conoutf(contype, "\f2%s got fragged by %s", dname, aname);
             else conoutf(contype, "\f2%s fragged %s", aname, dname);
         }
+        if(actor==player1) aname = "\f2you";
+        if(d==player1) dname = "\f2you";
+        if(d==actor) addfragmessage(contype, NULL, dname, HICON_TOKEN-HICON_FIST);
+        else addfragmessage(contype, aname, dname, d->lasthitpushgun);
         deathstate(d);
 		ai::killed(d, actor);
     }
@@ -1091,6 +1099,7 @@
         {
             if(gameclock) drawgameclock(w, h);
             if(hudscore) drawhudscore(w, h);
+            if(hudfragmessages==1 || (hudfragmessages==2 && !m_insta)) drawfragmessages(w, h);
         }
     }

Index: src/fpsgame/fragmessages.cpp
===================================================================
--- src/fpsgame/fragmessages.cpp	(nonexistent)
+++ src/fpsgame/fragmessages.cpp	(working copy)
@@ -0,0 +1,76 @@
+#include "game.h"
+
+namespace game {
+    vector<fragmessage> fragmessages; // oldest first, newest at the end
+
+    VARP(hudfragmessages, 0, 1, 2);
+    VARFP(maxhudfragmessages, 1, 3, 10, { fragmessages.growbuf(maxhudfragmessages); fragmessages.shrink(maxhudfragmessages); });
+    FVARP(hudfragmessageduration, 0, 2.0f, 10.0f); // in seconds
+    VARP(hudfragmessagefade, 0, 1, 1);
+    FVARP(hudfragmessagex, 0, 0.5f, 1.0f);
+    FVARP(hudfragmessagey, 0, 0.25f, 1.0f);
+    FVARP(hudfragmessagescale, 0.1f, 0.5f, 1.0f);
+    VARP(hudfragmessagestackdir, -1, 0, 1); // -1 = upwards, 1 = downwards
+    HVARP(hudfragmessagefilter, 0, 0x2800, 0x7FFFFFF); // default: own frags + teamkills
+
+    void addfragmessage(int contype, const char *aname, const char *vname, int gun)
+    {
+        if(!(contype&hudfragmessagefilter)) return;
+        if(fragmessages.length()>=maxhudfragmessages) fragmessages.remove(0, fragmessages.length()-maxhudfragmessages+1);
+        fragmessages.add(fragmessage(aname, vname, gun));
+    }
+
+    void clearfragmessages()
+    {
+        fragmessages.shrink(0);
+    }
+
+    void drawfragmessages(int w, int h)
+    {
+        if(fragmessages.empty()) return;
+
+        float stepsize = (3*HICON_SIZE)/2;
+        float stackdir = hudfragmessagestackdir ? hudfragmessagestackdir : (hudfragmessagey>0.5 ? 1 : -1); // default: towards closest edge
+        vec2 origin = vec2(hudfragmessagex, hudfragmessagey).mul(vec2(w, h).div(hudfragmessagescale));
+
+        pushhudmatrix();
+        hudmatrix.scale(hudfragmessagescale, hudfragmessagescale, 1);
+        flushhudmatrix();
+
+        int showmillis = (int)(hudfragmessageduration*1000.0f);
+
+        for(int i = fragmessages.length()-1; i>=0; i--)
+        {
+            fragmessage &m = fragmessages[i];
+
+            if(lastmillis-m.fragtime > showmillis + (hudfragmessagefade ? 255 : 0))
+            {
+                // all messages before i are older, so remove all of them
+                fragmessages.remove(0, i+1);
+                break;
+            }
+
+            int alpha = 255 - max(0, lastmillis-m.fragtime-showmillis);
+
+            vec2 drawposcenter = vec2(0, (fragmessages.length()-1-i)*stackdir*stepsize).add(origin);
+
+            int tw, th; vec2 drawpos;
+            if(m.attackername[0])
+            {
+                text_bounds(m.attackername, tw, th);
+                drawpos = vec2(-2*(tw+HICON_SIZE), -th).div(2).add(drawposcenter);
+                draw_text(m.attackername, drawpos.x, drawpos.y, 0xFF, 0xFF, 0xFF, alpha);
+            }
+
+            drawpos = vec2(drawposcenter).sub(HICON_SIZE / 2);
+            gle::color(bvec(0xFF, 0xFF, 0xFF), alpha);
+            drawicon(HICON_FIST + m.weapon, drawpos.x, drawpos.y);
+
+            text_bounds(m.victimname, tw, th);
+            drawpos = vec2(2*HICON_SIZE, -th).div(2).add(drawposcenter);
+            draw_text(m.victimname, drawpos.x, drawpos.y, 0xFF, 0xFF, 0xFF, alpha);
+        }
+
+        pophudmatrix();
+    }
+}
Index: src/fpsgame/fragmessages.h
===================================================================
--- src/fpsgame/fragmessages.h	(nonexistent)
+++ src/fpsgame/fragmessages.h	(working copy)
@@ -0,0 +1,28 @@
+#ifndef __FRAGMESSAGES_H__
+#define __FRAGMESSAGES_H__
+
+#include "game.h"
+
+namespace game {
+    struct fragmessage {
+        string attackername, victimname;
+        int weapon;
+        int fragtime;
+
+        fragmessage(const char *aname, const char *vname, int fragweapon)
+        {
+            copystring(attackername, aname ? aname : "");
+            copystring(victimname, vname);
+            weapon = fragweapon;
+            fragtime = lastmillis;
+        }
+    };
+
+    extern vector<fragmessage> fragmessages;
+    extern int hudfragmessages;
+    extern void addfragmessage(int contype, const char *aname, const char *vname, int gun);
+    extern void clearfragmessages();
+    extern void drawfragmessages(int w, int h);
+}
+
+#endif
Index: src/fpsgame/game.h
===================================================================
--- src/fpsgame/game.h	(revision 6488)
+++ src/fpsgame/game.h	(working copy)
@@ -543,6 +543,7 @@
     int respawned, suicided;
     int lastpain;
     int lastaction, lastattackgun;
+    int lasthitpushgun;
     bool attacking;
     int attacksound, attackchan, idlesound, idlechan;
     int lasttaunt;
@@ -578,6 +579,7 @@
         vec push(dir);
         push.mul((actor==this && guns[gun].exprad ? EXP_SELFPUSH : 1.0f)*guns[gun].hitpush*damage/weight);
         vel.add(push);
+        lasthitpushgun = gun;
     }

     void stopattacksound()
@@ -846,6 +848,8 @@
     extern vec hudgunorigin(int gun, const vec &from, const vec &to, fpsent *d);
 }

+#include "fragmessages.h"
+
 namespace server
 {
     extern const char *modename(int n, const char *unknown = "unknown");
Index: src/vcpp/sauerbraten.vcxproj
===================================================================
--- src/vcpp/sauerbraten.vcxproj	(revision 6488)
+++ src/vcpp/sauerbraten.vcxproj	(working copy)
@@ -1078,6 +1078,20 @@
       <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
       <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
     </ClCompile>
+    <ClCompile Include="..\fpsgame\fragmessages.cpp">
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">game.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)game.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
     <ClCompile Include="..\fpsgame\monster.cpp">
       <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">game.h</PrecompiledHeaderFile>
       <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">game.h</PrecompiledHeaderFile>
