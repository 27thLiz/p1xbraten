Index: src/Makefile
===================================================================
--- src/Makefile	(revision 6518)
+++ src/Makefile	(working copy)
@@ -45,6 +45,7 @@
 CLIENT_INCLUDES= $(INCLUDES) -Iinclude
 STD_LIBS= -static-libgcc -static-libstdc++
 CLIENT_LIBS= -mwindows $(STD_LIBS) -L$(WINBIN) -L$(WINLIB) -lSDL2 -lSDL2_image -lSDL2_mixer -lzlib1 -lopengl32 -lenet -lws2_32 -lwinmm
+CLIENT_LIBS+= -lcurl
 else
 ifneq (,$(findstring DARWIN,$(PLATFORM)))
 ifneq (,$(findstring CROSS,$(PLATFORM)))
@@ -67,6 +68,8 @@
+CLIENT_LIBS+= -lcurl
 else
 CLIENT_INCLUDES= $(INCLUDES) -I/usr/X11R6/include `sdl2-config --cflags`
 CLIENT_LIBS= -Lenet -lenet -L/usr/X11R6/lib -lX11 `sdl2-config --libs` -lSDL2_image -lSDL2_mixer -lz -lGL
+CLIENT_LIBS+= -lcurl
 endif
 endif
 ifeq ($(PLATFORM),LINUX)
@@ -87,6 +90,7 @@
 	engine/bih.o \
 	engine/blend.o \
 	engine/blob.o \
+	p1xbraten/checkupdate.o \
 	engine/client.o	\
 	engine/command.o \
 	engine/console.o \
Index: src/p1xbraten/checkupdate.cpp
===================================================================
--- src/p1xbraten/checkupdate.cpp	(nonexistent)
+++ src/p1xbraten/checkupdate.cpp	(working copy)
@@ -0,0 +1,35 @@
+#include "engine.h"
+#include <curl/curl.h>
+
+string latestversion;
+ICOMMAND(latestversion, "", (), stringret(latestversion));
+
+size_t extractlatestversion(char *buffer, size_t size, size_t nitems, void *userdata)
+{
+    static size_t l = strlen("location: ");
+    if(nitems>l && !strncasecmp("location: ", buffer, l))
+    {
+        // search backwards for last slash
+        int i = nitems-1; // nitems -> \n
+        while(*(buffer+i) != '/') i--;
+        copystring(latestversion, buffer+i+1, nitems-1-i);
+    }
+    return nitems * size;
+}
+
+void checkforp1xbratenupdate()
+{
+    CURL *curl = curl_easy_init();
+    if(!curl) return;
+    curl_easy_setopt(curl, CURLOPT_NOBODY, 1L); // HEAD request
+    curl_easy_setopt(curl, CURLOPT_URL, "https://github.com/sauerbraten/p1xbraten/releases/latest");
+    curl_easy_setopt(curl, CURLOPT_HEADERFUNCTION, extractlatestversion);
+    if(curl_easy_perform(curl)) { curl_easy_cleanup(curl); return; }
+    long status;
+    curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &status);
+    curl_easy_cleanup(curl);
+    if(status!=302L) return;
+    if(naturalsort(p1xbratenversion, latestversion) == -1) conoutf("\f6There's a newer version of p1xbraten available: %s", latestversion);
+}
+
+ICOMMAND(checkupdate, "", (), checkforp1xbratenupdate());
