Index: src/Makefile
===================================================================
--- src/Makefile	(revision 6490)
+++ src/Makefile	(working copy)
@@ -127,6 +127,7 @@
 	fpsgame/fps.o \
 	fpsgame/monster.o \
 	fpsgame/movable.o \
+	fpsgame/p1xbraten_menus.o \
 	fpsgame/render.o \
 	fpsgame/scoreboard.o \
 	fpsgame/server.o \
Index: src/fpsgame/p1xbraten_menus.cpp
===================================================================
--- src/fpsgame/p1xbraten_menus.cpp	(nonexistent)
+++ src/fpsgame/p1xbraten_menus.cpp	(working copy)
@@ -0,0 +1,79 @@
+#include "cube.h"
+#include "p1xbraten_menus.h"
+
+namespace game {
+    struct embeddedfile<0> menuscfg = {
+        "data/p1xbraten/menus.cfg.gz",
+        0,//menuscrc
+        {
+            #include "../../data/p1xbraten/menus.cfg.gz.xxd"
+        }
+    };
+
+    struct embeddedfile<0> mastercfg = {
+        "data/p1xbraten/master.cfg.gz",
+        0,//mastercrc
+        {
+            #include "../../data/p1xbraten/master.cfg.gz.xxd"
+        }
+    };
+
+    struct embeddedfile<0> gamehudcfg = {
+        "data/p1xbraten/gamehud.cfg.gz",
+        0,//gamehudcrc
+        {
+            #include "../../data/p1xbraten/gamehud.cfg.gz.xxd"
+        }
+    };
+
+    template<size_t N>
+    int update(embeddedfile<N> *i)
+    {
+        stream *f = opengzfile(path(i->name), "rb");
+        if(f)
+        {
+            uint fcrc = f->getcrc();
+            delete f;
+            if(fcrc && fcrc == i->crc) return 0; // no need to write
+        }
+
+        f = openrawfile(path(i->name), "wb");
+        if(!f) return 2;
+        f->write(i->contents, N);
+        delete f;
+        conoutf("updated %s", i->name);
+        return 0;
+    }
+
+    extern int usep1xbratenmenus;
+
+    void executep1xbratenmenufiles()
+    {
+        if(usep1xbratenmenus) execfile(menuscfg.name);
+    }
+
+    int writep1xbratenmenufiles()
+    {
+        if(!usep1xbratenmenus) return 1;
+
+        int err = update(&menuscfg);
+        if(err) { conoutf("\f6error updating %s (error code %d)!", menuscfg.name, err); return err; }
+
+        err = update(&mastercfg);
+        if(err) { conoutf("\f6error updating %s(error code %d)!", mastercfg.name, err); return err; }
+
+        err = update(&gamehudcfg);
+        if(err) { conoutf("\f6error updating %s(error code %d)!", gamehudcfg.name, err); return err; }
+
+        return 0;
+    }
+
+    VARFP(usep1xbratenmenus, 0, 1, 1, {
+        if(usep1xbratenmenus)
+        {
+            writep1xbratenmenufiles();
+            executep1xbratenmenufiles();
+        }
+        else execfile("data/menus.cfg");
+    });
+}
Index: src/fpsgame/p1xbraten_menus.h
===================================================================
--- src/fpsgame/p1xbraten_menus.h	(nonexistent)
+++ src/fpsgame/p1xbraten_menus.h	(working copy)
@@ -0,0 +1,10 @@
+#include "cube.h"
+
+namespace game {
+    template<size_t N>
+    struct embeddedfile {
+        string name;
+        const uint crc;
+        const uchar contents[N];
+    };
+}
\ No newline at end of file
Index: src/shared/igame.h
===================================================================
--- src/shared/igame.h	(revision 6490)
+++ src/shared/igame.h	(working copy)
@@ -48,6 +48,8 @@
     extern const char *autoexec();
     extern const char *savedservers();
     extern void loadconfigs();
+    extern int writep1xbratenmenufiles();
+    extern void executep1xbratenmenufiles();

     extern void updateworld();
     extern void initclient();
Index: src/shared/stream.cpp
===================================================================
--- src/shared/stream.cpp	(revision 6490)
+++ src/shared/stream.cpp	(working copy)
@@ -853,7 +853,15 @@
         return true;
     }

-    uint getcrc() { return crc; }
+    uint getcrc()
+    {
+        if(crc) return crc;
+        if(!file) return 0;
+        offset pos = file->tell();
+        if(!file->seek(-8, SEEK_END)) return 0;
+        uint icrc = file->getlil<uint>();
+        return file->seek(pos, SEEK_SET) ? icrc : 0;
+    }

     void finishreading()
     {
Index: src/vcpp/sauerbraten.vcxproj
===================================================================
--- src/vcpp/sauerbraten.vcxproj	(revision 6490)
+++ src/vcpp/sauerbraten.vcxproj	(working copy)
@@ -1132,6 +1132,20 @@
       <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)%(Filename)2.obj</ObjectFileName>
       <ObjectFileName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)%(Filename)2.obj</ObjectFileName>
     </ClCompile>
+    <ClCompile Include="..\fpsgame\p1xbraten_menus.cpp">
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">cube.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">cube.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">$(IntDir)cube.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">$(IntDir)cube.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">cube.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">cube.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|Win32'">$(IntDir)cube.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Profile|x64'">$(IntDir)cube.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">cube.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">cube.h</PrecompiledHeaderFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">$(IntDir)cube.pch</PrecompiledHeaderOutputFile>
+      <PrecompiledHeaderOutputFile Condition="'$(Configuration)|$(Platform)'=='Release|x64'">$(IntDir)cube.pch</PrecompiledHeaderOutputFile>
+    </ClCompile>
     <ClCompile Include="..\fpsgame\render.cpp">
       <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">game.h</PrecompiledHeaderFile>
       <PrecompiledHeaderFile Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">game.h</PrecompiledHeaderFile>
