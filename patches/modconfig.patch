Index: src/engine/command.cpp
===================================================================
--- src/engine/command.cpp	(revision 6518)
+++ src/engine/command.cpp	(working copy)
@@ -194,17 +194,24 @@
 static bool initedidents = false;
 static vector<ident> *identinits = NULL;

+ident *lastaddedident; // set in addident()
+
+int setmodidentflag() {
+    if(lastaddedident) { lastaddedident->flags |= IDF_MOD; }
+    return 0;
+}
+
 static inline ident *addident(const ident &id)
 {
     if(!initedidents)
     {
         if(!identinits) identinits = new vector<ident>;
-        identinits->add(id);
+        lastaddedident = &(identinits->add(id));
         return NULL;
     }
     ident &def = idents.access(id.name, id);
     def.index = identmap.length();
-    return identmap.add(&def);
+    return lastaddedident = identmap.add(&def);
 }

 static bool initidents()
@@ -2450,7 +2457,7 @@
     loopv(ids)
     {
         ident &id = *ids[i];
-        if(id.flags&IDF_PERSIST) switch(id.type)
+        if(id.flags&IDF_PERSIST && !(id.flags&IDF_MOD)) switch(id.type)
         {
             case ID_VAR: f->printf("%s %d\n", escapeid(id), *id.storage.i); break;
             case ID_FVAR: f->printf("%s %s\n", escapeid(id), floatstr(*id.storage.f)); break;
@@ -2476,7 +2483,22 @@
     f->printf("\n");
     writecompletions(f);
     delete f;
+    f = openutf8file(path(game::modconfig(), true), "w");
+    if(!f) return;
+    f->printf("// automatically written on exit, DO NOT MODIFY\n\n");
+    loopv(ids)
+    {
+        ident &id = *ids[i];
+        if(id.flags&IDF_PERSIST && id.flags&IDF_MOD) switch(id.type)
+        {
+            case ID_VAR: f->printf("%s %d\n", escapeid(id), *id.storage.i); break;
+            case ID_FVAR: f->printf("%s %s\n", escapeid(id), floatstr(*id.storage.f)); break;
+            case ID_SVAR: f->printf("%s %s\n", escapeid(id), escapestring(*id.storage.s)); break;
 }
+    }
+    f->printf("\n");
+    delete f;
+}

 COMMAND(writecfg, "s");
 #endif
Index: src/engine/main.cpp
===================================================================
--- src/engine/main.cpp	(revision 6518)
+++ src/engine/main.cpp	(working copy)
@@ -1312,6 +1312,7 @@
         execfile(game::defaultconfig());
         writecfg(game::restoreconfig());
     }
+    execfile(game::modconfig(), false);
     execfile(game::autoexec(), false);

     identflags &= ~IDF_PERSIST;
Index: src/fpsgame/fps.cpp
===================================================================
--- src/fpsgame/fps.cpp	(revision 6518)
+++ src/fpsgame/fps.cpp	(working copy)
@@ -1300,6 +1300,7 @@
     const char *savedconfig() { return "config.cfg"; }
     const char *restoreconfig() { return "restore.cfg"; }
     const char *defaultconfig() { return "data/defaults.cfg"; }
+    const char *modconfig() { return "p1xbraten.cfg"; }
     const char *autoexec() { return "autoexec.cfg"; }
     const char *savedservers() { return "servers.cfg"; }

Index: src/shared/command.h
===================================================================
--- src/shared/command.h	(revision 6518)
+++ src/shared/command.h	(working copy)
@@ -40,7 +40,7 @@

 enum { ID_VAR, ID_FVAR, ID_SVAR, ID_COMMAND, ID_ALIAS, ID_LOCAL };

-enum { IDF_PERSIST = 1<<0, IDF_OVERRIDE = 1<<1, IDF_HEX = 1<<2, IDF_READONLY = 1<<3, IDF_OVERRIDDEN = 1<<4, IDF_UNKNOWN = 1<<5, IDF_ARG = 1<<6, IDF_EMUVAR = 1<<7 };
+enum { IDF_PERSIST = 1<<0, IDF_OVERRIDE = 1<<1, IDF_HEX = 1<<2, IDF_READONLY = 1<<3, IDF_OVERRIDDEN = 1<<4, IDF_UNKNOWN = 1<<5, IDF_ARG = 1<<6, IDF_EMUVAR = 1<<7, IDF_MOD = 1<<15 };

 struct ident;

@@ -333,3 +333,7 @@
 #define ICOMMANDSNAME _icmds_
 #define ICOMMANDS(name, nargs, proto, b) ICOMMANDNS(name, ICOMMANDSNAME, nargs, proto, b)

+extern int setmodidentflag();
+#define MOD(macro, name, ...) \
+    macro(name, ##__VA_ARGS__); \
+    UNUSED static int setmodident ## name = setmodidentflag();
Index: src/shared/igame.h
===================================================================
--- src/shared/igame.h	(revision 6518)
+++ src/shared/igame.h	(working copy)
@@ -45,6 +45,7 @@
     extern const char *savedconfig();
     extern const char *restoreconfig();
     extern const char *defaultconfig();
+    extern const char *modconfig();
     extern const char *autoexec();
     extern const char *savedservers();
     extern void loadconfigs();
